set.seed(12345)
# First, I'll split the training set into train/validate sets:
# train <- train[complete.cases(train),]
inTrain <- createDataPartition(train$classe, p=0.80, list=FALSE)
validate <- train[-inTrain,]
train <- train[inTrain,]
myControl <- trainControl(method = "cv", number = 5)
myTune <- data.frame(mtry = c(10, 40, 70, 100, 130, 160))
rfMod <- train(classe ~ .,
data = train,
method = "ranger",
tuneGrid = myTune,
trControl = myControl
)
myTune <- data.frame(mtry = c(10, 40, 70, 100, 130, 160))
rfMod <- train(classe ~ .,
data = train,
method = "ranger",
tuneGrid = myTune,
trControl = myControl,
na.action = na.pass
)
rfMod <- train(classe ~ .,
data = train,
method = "ranger",
tuneLength = 5,
trControl = myControl,
na.action = na.pass
)
rfMod <- train(classe ~ .,
data = train,
method = "ranger",
tuneLength = 5,
na.action = na.pass
)
glmMod <- train(classe ~ .,
data = train,
method = "glm",
trControl = myControl,
na.action = na.pass)
dim(train)
rm(list=ls())
# Set global options for this report.
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Import required packages.
library(dplyr); library(caret); library(ggplot2)
# Download and read in the data.
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv") && !file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")) {
download.file(trainURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv")
download.file(testURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")
}
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
complete.cases(test)
dim(test)
test
complete.cases(train)
names(train)
train$var_yaw_forearm
naCount <- vector()
for(i in nrow(train$X)) {
naSum <- sum(is.na(train[,i]))
naCount <- c(naCount, naSum)
}
naCount
sum(is.na(train[,5]))
sum(is.na(train[,149]))
naCount <- vector()
for(i in seq_along(train$X)) {
naSum <- sum(is.na(train[,i]))
naCount <- c(naCount, naSum)
}
for(i in seq_along(train[,1])) {
naSum <- sum(is.na(train[,i]))
naCount <- c(naCount, naSum)
}
class(train)
naCount <- vector()
for(i in 1:160) {
naSum <- sum(is.na(train[,i]))
naCount <- c(naCount, naSum)
}
naCount
19216/19622
train <- train[,naCount < 19000]
naCountTrain <- vector()
for(i in 1:160) {
naSum <- sum(is.na(train[,i]))
naCountTrain <- c(naCountTrain, naSum)
}
train <- train[,naCountTrain < 19000]
naCountTest <- vector()
for(i in 1:160) {
naSum <- sum(is.na(test[,i]))
naCountTest <- c(naCountTest, naSum)
}
test <- train[,naCountTest < 19000]
naCountTrain <- vector()
for(i in 1:160) {
naSum <- sum(is.na(train[,i]))
naCountTrain <- c(naCountTrain, naSum)
}
train <- train[,naCountTrain < 19000]
naCountTest <- vector()
for(i in 1:160) {
naSum <- sum(is.na(test[,i]))
naCountTest <- c(naCountTest, naSum)
}
test <- test[,naCountTest < 19000]
naCountTEst
naCountTest
naCountTrain <- vector()
for(i in 1:160) {
naSum <- sum(is.na(train[,i]))
naCountTrain <- c(naCountTrain, naSum)
}
train <- train[,naCountTrain < 19000]
naCountTest <- vector()
for(i in 1:160) {
naSum <- sum(is.na(test[,i]))
naCountTest <- c(naCountTest, naSum)
}
test <- test[,naCountTest < 20]
rm(list=ls())
# Set global options for this report.
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Import required packages.
library(dplyr); library(caret); library(ggplot2)
# Download and read in the data.
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv") && !file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")) {
download.file(trainURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv")
download.file(testURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")
}
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
naCountTrain <- vector()
for(i in 1:160) {
naSum <- sum(is.na(train[,i]))
naCountTrain <- c(naCountTrain, naSum)
}
train <- train[,naCountTrain < 19000]
test <- test[,naCountTrain < 19000]
set.seed(12345)
# First, I'll split the training set into train/validate sets:
# train <- train[complete.cases(train),]
inTrain <- createDataPartition(train$classe, p=0.80, list=FALSE)
validate <- train[-inTrain,]
train <- train[inTrain,]
myControl <- trainControl(method = "cv", number = 5)
myTune <- data.frame(mtry = c(10, 40, 70, 100, 130, 160))
rfMod <- train(classe ~ .,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = myTune
)
rfMod <- train(classe ~ .,
data = train,
method = "ranger"
)
warnings()
str(train)
train$skewness_yaw_dumbbell
View(train)
rm(list=ls())
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
View(train)
# Set global options for this report.
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Import required packages.
library(dplyr); library(caret); library(ggplot2)
# Download and read in the data.
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv") && !file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")) {
download.file(trainURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv")
download.file(testURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")
}
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
test <- read.csv("pml-testing.csv", na.strings = c("", "NA"))
naCountTrain <- vector()
for(i in 1:160) {
naSum <- sum(is.na(train[,i]))
naCountTrain <- c(naCountTrain, naSum)
}
train <- train[,naCountTrain < 19000]
test <- test[,naCountTrain < 19000]
set.seed(12345)
# First, I'll split the training set into train/validate sets:
# train <- train[complete.cases(train),]
inTrain <- createDataPartition(train$classe, p=0.80, list=FALSE)
validate <- train[-inTrain,]
train <- train[inTrain,]
rfMod <- train(classe ~ .,
data = train,
method = "ranger",
tuneLength = 5)
View(train)
str(train)
str(test)
train <- train[,naCountTrain < 19000]
test <- test[,naCountTrain < 19000]
train <- train[,8:ncol(train)]
test <- test[,8:ncol(test)]
set.seed(12345)
# First, I'll split the training set into train/validate sets:
# train <- train[complete.cases(train),]
inTrain <- createDataPartition(train$classe, p=0.80, list=FALSE)
validate <- train[-inTrain,]
train <- train[inTrain,]
rfMod <- train(classe ~ .,
data = train,
method = "ranger",
tuneLength = 5)
Sys.info
Sys.info()
glmMod <- train(classe ~ .,
data = train,
method = "glm")
str(train)
rfMod <- train(classe ~ roll_dumbbell:magnet_dumbbell_z,
data = train,
method = "ranger",
tuneLength = 5)
View(train)
featurePlot(train[,roll_dumbbell:magnet_dumbbell_z]
)
train[,roll_dumbbell:magnet_dumbbell_z]
train[,"roll_dumbbell":"magnet_dumbbell_z"]
train[,roll_dumbbell:train$magnet_dumbbell_z]
select(.data = train, roll_dumbbell:magnet_dumbbell_z)
dumbbell <- select(train, roll_dumbbell:magnet_dumbbell_z, classe)
rfMod <- train(classe ~ .
data = dumbbell,
method = "ranger",
tuneLength = 5)
rfMod <- train(classe ~ .,
data = dumbbell,
method = "ranger",
tuneLength = 5)
rfMod <- train(classe ~ .,
data = dumbbell,
method = "ranger")
rfMod <- train(classe ~ .,
data = dumbbell,
method = "ranger",
tuneGrid = data.frame(mtry = 5))
rfPredict <- predict(rfMod, dumbbell)
confusionMatrix(rfPredict, dumbbell$classe)
trdumbbell <- select(validate, roll_dumbbell:magnet_dumbbell_z, classe)
trbelt <- select(validate, roll_belt:magnet_belt_z, classe)
trarm <- select(validate, roll_dumbbell:magnet_arm_z, classe)
trforearm <- select(validate, roll_forearm:magnet_forearm_z, classe)
vdumbbell <- select(validate, roll_dumbbell:magnet_dumbbell_z, classe)
vbelt <- select(validate, roll_belt:magnet_belt_z, classe)
varm <- select(valdiate, roll_dumbbell:magnet_arm_z, classe)
vforearm <- select(valdiate, roll_forearm:magnet_forearm_z, classe)
trdumbbell <- select(validate, roll_dumbbell:magnet_dumbbell_z, classe)
trbelt <- select(validate, roll_belt:magnet_belt_z, classe)
trarm <- select(validate, roll_dumbbell:magnet_arm_z, classe)
trforearm <- select(validate, roll_forearm:magnet_forearm_z, classe)
vdumbbell <- select(validate, roll_dumbbell:magnet_dumbbell_z, classe)
vbelt <- select(validate, roll_belt:magnet_belt_z, classe)
varm <- select(validate, roll_dumbbell:magnet_arm_z, classe)
vforearm <- select(validate, roll_forearm:magnet_forearm_z, classe)
rfPredict <- predict(rfMod, vdumbbell)
confusionMatrix(rfPredict, vdumbbell)
rfPredict <- predict(rfMod$finalModel, vdumbbell)
confusionMatrix(rfPredict, vdumbbell)
trdumbbell <- select(train, roll_dumbbell:magnet_dumbbell_z, classe)
trbelt <- select(train, roll_belt:magnet_belt_z, classe)
trarm <- select(train, roll_dumbbell:magnet_arm_z, classe)
trforearm <- select(train, roll_forearm:magnet_forearm_z, classe)
vdumbbell <- select(validate, roll_dumbbell:magnet_dumbbell_z, classe)
vbelt <- select(validate, roll_belt:magnet_belt_z, classe)
varm <- select(validate, roll_dumbbell:magnet_arm_z, classe)
vforearm <- select(validate, roll_forearm:magnet_forearm_z, classe)
rfPredict <- predict(rfMod$finalModel, vdumbbell)
confusionMatrix(rfPredict, vdumbbell)
rfPredict <- predict(rfMod, trdumbbell)
rfPredict <- predict(rfMod, vdumbbell)
confusionMatrix(rfPredict, vdumbbell)
rfPredict <- predict(rfMod, vdumbbell, type = "class")
rfPredict <- predict(rfMod$finalModel, vdumbbell, type = "class")
rfPredict <- predict(rfMod$finalModel, vdumbbell, type = "response")
confusionMatrix(rfPredict, vdumbbell)
rfPredict <- predict(rfMod, vdumbbell)
?confusionMatrix
rfPredict
confusionMatrix(rfPredict, vdumbbell)
confusionMatrix(rfPredict, vdumbbell$classe)
rfMod2 <- train(classe ~ .,
data = trarm,
method = "ranger",
tuneGrid = data.frame(mtry = 5))
rfPredict2 <- predict(rfMod, varm)
confusionMatrix(rfPredict2, varm$classe)
rfMod2 <- train(classe ~ .,
data = trarm,
method = "ranger",
tuneGrid = data.frame(mtry = 2))
rfPredict2 <- predict(rfMod, varm)
confusionMatrix(rfPredict2, varm$classe)
rfPredict2 <- predict(rfMod2, varm)
rfArmAcc <- confusionMatrix(rfPredict2, varm$classe)$overall[1]
rfArmAcc
rfDumbbellAcc
rfPredict <- predict(rfMod, vdumbbell)
rfDumbbellAcc <- confusionMatrix(rfPredict, vdumbbell$classe)$overall[1]
rfDumbbellAcc
rfPredict2 <- predict(rfMod2, varm)
rfArmAcc <- confusionMatrix(rfPredict2, varm$classe)$overall[1]
rfArmAcc
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glm")
glmPredict <- predict(glmMod, vdumbbell)
glmDumbbellAcc <- confusionMatrix(glmPredict, vdumbbell$classe)$overall[1]
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glm")
View(trdumbbell)
?train
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glm",
family = "logit")
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glm",
trControl = trainContraol(family = "logit"))
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glm",
trControl = trainControl(family = "logit"))
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glm")
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glmboost")
glmMod <- train(classe ~ .,
data = trdumbbell,
method = "glmboost")
rpartMod <- train(classe ~ .,
data = trdumbbell,
method = "rpart")
rpartPredict <- predict(glmMod, vdumbbell)
rpartPredict <- predict(rpartMod, vdumbbell)
rpartDumbbellAcc <- confusionMatrix(rpartPredict, vdumbbell$classe)$overall[1]
rpartDumbbellAcc
rpartMod2 <- train(classe ~ .,
data = trarm,
method = "rpart")
rpartPredict2 <- predict(rpartMod2, varm)
rpartDumbbellAcc2 <- confusionMatrix(rpartPredict2, varm$classe)$overall[1]
rpartArmAcc <- confusionMatrix(rpartPredict2, varm$classe)$overall[1]
rpartArmAcc
names(train)
myControl <- trainControl(method = "cv", number = 5)
dumbVars <- c("roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "total_accel_dumbbell", "gyros_dumbbell_x", "gyros_dumbbell_y", "gyros_dumbbell_z", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")
bestMod <- train(classe ~ dumbVars,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 5))
bestMod <- train(classe ~ train$dumbVars,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 5))
bestMod <- train(classe ~ "roll_dumbbell"+"pitch_dumbbell"+"yaw_dumbbell"+"total_accel_dumbbell"+"gyros_dumbbell_x"+"gyros_dumbbell_y"+"gyros_dumbbell_z"+"accel_dumbbell_x"+"accel_dumbbell_y"+"accel_dumbbell_z"+"magnet_dumbbell_x"+"magnet_dumbbell_y"+"magnet_dumbbell_z",
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 5))
bestMod <- train(classe ~ "roll_dumbbell",
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 5))
bestMod <- train(classe ~ roll_dumbbell,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 5))
bestMod <- train(classe ~ roll_dumbbell:magnet_dumbbell_z,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 5))
bestMod <- train(classe ~ roll_dumbbell+pitch_dumbbell+yaw_dumbbell+
total_accel_dumbbell+gyros_dumbbell_x+
gyros_dumbbell_y+gyros_dumbbell_z+accel_dumbbell_x+
accel_dumbbell_y+accel_dumbbell_z+magnet_dumbbell_x+
magnet_dumbbell_y+magnet_dumbbell_z,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 5))
bestPredict <- predict(bestMod, validate)
bestAcc <- confusionMatrix(bestPredict, validate$classe)$overall[1]
bestAcc
rfDumbbellAcc
confusionMatrix(bestPredict, validate$classe)$overall[1]
confusionMatrix(bestPredict, validate$classe)
plot(bestPredict)
plot(bestMod)
bestMod
bestMod <- train(classe ~ roll_dumbbell+pitch_dumbbell+yaw_dumbbell+
total_accel_dumbbell+gyros_dumbbell_x+
gyros_dumbbell_y+gyros_dumbbell_z+accel_dumbbell_x+
accel_dumbbell_y+accel_dumbbell_z+magnet_dumbbell_x+
magnet_dumbbell_y+magnet_dumbbell_z,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = 2,5,10,15))
bestMod <- train(classe ~ roll_dumbbell+pitch_dumbbell+yaw_dumbbell+
total_accel_dumbbell+gyros_dumbbell_x+
gyros_dumbbell_y+gyros_dumbbell_z+accel_dumbbell_x+
accel_dumbbell_y+accel_dumbbell_z+magnet_dumbbell_x+
magnet_dumbbell_y+magnet_dumbbell_z,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = c(2,5,10,15)))
bestMod <- train(classe ~ roll_dumbbell+pitch_dumbbell+yaw_dumbbell+
total_accel_dumbbell+gyros_dumbbell_x+
gyros_dumbbell_y+gyros_dumbbell_z+accel_dumbbell_x+
accel_dumbbell_y+accel_dumbbell_z+magnet_dumbbell_x+
magnet_dumbbell_y+magnet_dumbbell_z,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = c(2,5,10,13)))
bestPredict <- predict(bestMod, validate)
bestAcc <- confusionMatrix(bestPredict, validate$classe)$overall[1]
plot(bestMod)
testPredict <- predict(bestMod, test)
testAcc <- confusionMatrix(testPredict, test$classe)$overall[1]
testPredict
test$classe
test
# Set global options for this report.
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Import required packages.
library(dplyr); library(caret); library(ggplot2)
# Download and read in the data.
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv") && !file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")) {
download.file(trainURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv")
download.file(testURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")
}
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
test <- read.csv("pml-testing.csv", na.strings = c("", "NA"))
rm(list=ls())
# Set global options for this report.
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Import required packages.
library(dplyr); library(caret); library(ggplot2)
# Download and read in the data.
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(!file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv") && !file.exists("/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")) {
download.file(trainURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-training.csv")
download.file(testURL, destfile= "/Users/natha/Desktop/MS Data Science/Coursera Data Science Specialization/Rscripts/MachineLearning/Machine Learning Course Project/pml-testing.csv")
}
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
test <- read.csv("pml-testing.csv", na.strings = c("", "NA"))
naCountTrain <- vector()
for(i in 1:160) {
naSum <- sum(is.na(train[,i]))
naCountTrain <- c(naCountTrain, naSum)
}
train <- train[,naCountTrain < 19000]
test <- test[,naCountTrain < 19000]
train <- train[,8:ncol(train)]
test <- test[,8:ncol(test)]
set.seed(12345)
# First, I'll split the training set into train/validate sets:
# train <- train[complete.cases(train),]
inTrain <- createDataPartition(train$classe, p=0.80, list=FALSE)
validate <- train[-inTrain,]
train <- train[inTrain,]
test
test$classe
myControl <- trainControl(method = "cv", number = 5)
bestMod <- train(classe ~ roll_dumbbell+pitch_dumbbell+yaw_dumbbell+
total_accel_dumbbell+gyros_dumbbell_x+
gyros_dumbbell_y+gyros_dumbbell_z+accel_dumbbell_x+
accel_dumbbell_y+accel_dumbbell_z+magnet_dumbbell_x+
magnet_dumbbell_y+magnet_dumbbell_z,
data = train,
method = "ranger",
trControl = myControl,
tuneGrid = data.frame(mtry = c(2,5,10,13)))
bestPredict <- predict(bestMod, validate)
bestAcc <- confusionMatrix(bestPredict, validate$classe)$overall[1]
plot(bestMod)
testPredict <- predict(bestMod, test)
testPredict
table(testPredict)
x <- data.frame(Prediction = testPredict)
x
quit
quit()
